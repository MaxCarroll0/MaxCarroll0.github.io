### Configuration file for the soupault website generator ###

## Global settings

[settings]
  # Require soupault 5.1.0 or later
  soupault_version = "5.1.0"

  # Show build progress
  verbose = true

  # Show detailed debug information
  debug = true

  # Fail on page processing errors
  strict = true

  # Where generated files go
  build_dir = "build/"

  # Where page files are stored
  site_dir = "site/"

  # HTML page skeleton file to insert content into
  default_template_file = "templates/main.html"

  # Insert the content in <main>, after existing children (if any)
  default_content_selector = "main"
  default_content_action = "append_child"

  # Page considered the section index
  index_page = "index"

  # Extensions of files considered pages rather than assets
  page_file_extensions = ["htm", "html", "md"]

  # Extensions of files to be converted from Markdown to HTML
  # using the built-in Markdown processor
  markdown_extensions = ["md"]

  doctype = "<!DOCTYPE html>"

  # Automatically load Lua plugins from plugins/
  # E.g. plugins/reading-time.lua is automatically loaded as "reading-time" widget.
  plugin_discovery = true
  plugin_dirs = ["plugins"]

# Options in the [custom_options] table aren't soupault built-ins.
# It's a table for options that can be shared between multiple plugins.
[custom_options]

  # Number of "lastest post" to display on the main page
  blog_summary_max_entries = 10
  papers_summary_max_entries = 4

  ## Atom feed settings
  atom_feeds = false

  # If you want to generate Atom feeds, you will need to adjust the site metadata config below:

  # Required:
  # site_url = "https://www.example.com/~jrandomhacker"

  # Optional but strongly recommended:
  # site_author = "J. Random Hacker"
  # site_author_email = "jrandomhacker@example.com"
  # site_title = "My website"
  # site_logo = "https://example.com/~jrandomhacker/favicon.png"

  # Completely optional: 
  # site_subtitle = "Some subtitle"

# Autogenerated section blog index settings
[index]
  index = true

  sort_descending = true

  extract_after_widgets = ['insert-reading-time', 'make-post-header', 'make-paper-header', 'insert-series-nav-bar']

  sort_by = "date"

  # A directory with a .leaf file in it is treated as hand-made "clean URL",
  # rather than a section.
  leaf_file = ".leaf"

[index.fields]
  # blogs
  post_title = { selector = ["#post-title", "h1"] }
  post_series = { selector = ["#post-series"] }
  post_excerpt = { selector = ["#post-excerpt", "p"] }
  post_date = { selector = ["#post-date", "time"] }

  post_reading_time = { selector = "#post-reading-time" }

  
  ## both
  tags = { selector = ".tag", select_all = true }

  # papers
  paper_title = { selector = ["#paper-title", "h1"] }
  paper_date = { selector = ["#paper-date", "time"] }
  paper_conference = { selector = ["#paper-conference"] }
  paper_type = {selector = ".paper-type"}
  paper_abstract = { selector = ["#paper-abstract", "p"] }
  paper_authors = { selector = ".paper-author", select_all = true }    

  paper_artifacts = { selector = ".paper-artifact", select_all = true }

  paper_pages = { selector = "#paper-pages" }


## TODO: List only series. Drop down on each series
[index.views.blog-index]
  # Insert generated index into an element that matches "#blog-index" selector.
  index_selector = "#blog-entries"

  # Only extract metadata from pages in site/blog/*
  section = "blog"
  include_subsections = true  

  # Jingoo template for rendering extracted metadata
  # One entry for each series
  index_template = """
    {% for e in entries %}
    {% if not e.post_series %}
    {% set series = entries | map(attr('post_series')) | select(eq(e.post_title)) %}
    <h2 id="post-title"><a href="{{e.url}}">{{e.post_title}}</a>{% if series %} ({{length(series)}} posts){% endif %}</h2>
    <div><strong>Date posted:</strong> {% if series %}{{(entries | find(compose(eq(e.post_title), attr('post_series')))).post_date}}{% else %}{{e.post_date}}{% endif %}</div>
    {% if e.tags %}
    <div class="post-tags">
       <strong>Tags: </strong>
       {%- for tag in e.tags -%}
         <a href="/tags/{{tag}}"><span class="tag">{{tag}}</span></a>{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}
    {% if not series %}<div><strong>Reading time:</strong> {{e.post_reading_time}}</div>{% endif %}
    <p>{{e.post_excerpt}}</p>
    <a href="{{e.url}}">Read more</a>
    {% endif %}
    {% endfor %}
  """

  # Override soupault's built-in index processor with a custom Lua script.
  # That script is written to mimic the built-in indexer behavior,
  # it will take a template from the index_template option.
#  file = "helpers/blog-index.lua"


# This view displays the first ten entries on the main page
[index.views.blog-summary]
  index_selector = "#latest-blog-entries"

  section = "blog"
  include_subsections = true

  sort_by = "post_date"
  sort_descending = true

  # In this case index_template is a soupault built-in
  index_template = """
    {% set limit = int(soupault_config.custom_options.blog_summary_max_entries) %}
    <dl>
      {% for e in sublist(0, limit, entries) %}
      <dt>{{e.post_date}}</dt>
      <dd> <a href="{{e.url}}">{{e.post_title}}</a>{% if e.post_series %} - <a href="blog/{{e.post_series}}/">{{e.post_series}}</a>{% endif %} <i>(Reading time: {{e.post_reading_time}})</i></dd>
      {% endfor %}
      </ul>
    </dl>
  """

[index.views.series]
  index_selector = "#sidebar-right"
  index_selector_override = "#series"

  section = "blog"
  include_subsections = true

  sort_by = "post_date"
  sort_descending = false

  # In this case index_template is a soupault built-in
  index_template = """
    <dl>
      {% %}
      {% for e in entries %}
      <dt>{{e.post_date}}</dt>
      <dd> <a href="{{e.url}}">{{e.post_title}}</a> <i>(Reading time: {{e.post_reading_time}})</i></dd>
      {% endfor %}
      </ul>
    </dl>
  """

  lua_source = '''
    series = HTML.select_one(page, "#post-series")
    if series == null then
      series = HTML.select_one(page, "#post-title")
    end

    local filtered = {}
    local n = 1
    local i = 1
    while site_index[i] do
      local post = site_index[i]
      if post["post_series"] == HTML.inner_html(series) then
        filtered[n] = post
        n = n + 1
      end
      i = i + 1
    end

    env = {}
    env["entries"] = filtered
    rendered_entries = HTML.parse(String.render_template(config["index_template"], env))
    container = HTML.select_one(page, config["index_selector_override"])

    if container == null then
      container = HTML.select_one(page, config["index_selector"])
    end
    HTML.append_child(container, rendered_entries)
  '''

[index.views.series-nav-bar]
  index_selector = "nav#series-nav-bar"

  section = "blog"
  include_subsections = true

  # In this case index_template is a soupault built-in
  index_template = """
  {% if series_prev or series_next %}
  <div style="display:flex; justify-content:space-between; align-items:center;" class="nav-links">
    <div class="nav-prev">
      {% if series_prev %}
        <a href="{{ series_prev_url }}" class="nav-link">← {{ series_prev }}</a>
      {% else %}
        <span class="nav-link disabled">← No previous post</span>
      {% endif %}
    </div>
    <div class="nav-series-name">
      <a href="/blog/{{series}}" class="nav-link series-link">{{ series }}</a>
    </div>
    <div class="nav-next">
      {% if series_next %}
        <a href="{{ series_next_url }}" class="nav-link">{{ series_next }} →</a>
      {% else %}
        <span class="nav-link disabled">No next post →</span>
      {% endif %}
    </div>
  </div>
  {% endif %}
  """

  lua_source = '''
    series = HTML.inner_html(HTML.select_one(page, "#post-series"))
    title = HTML.inner_html(HTML.select_one(page, "#post-title"))

    local filtered = {}
    local n = 1
    local i = 1
    while site_index[i] do
      local post = site_index[i]
      if post["post_series"] == series then
        filtered[n] = post
        n = n + 1
      end
      i = i + 1
    end

    i = 1
    while filtered[i] do
      if filtered[i]["post_title"] == title then
        series_prev = filtered[i + 1]
        series_next = filtered[i - 1]
      end
      i = i + 1
    end

    env = {}
    env["series"] = series
    if series_prev then
      env["series_prev"] = series_prev["post_title"]
      env["series_prev_url"] = series_prev["url"]
    end if series_next then
      env["series_next"] = series_next["post_title"]
      env["series_next_url"] = series_next["url"]
    end

    rendered_entries = HTML.parse(String.render_template(config["index_template"], env))
    container = HTML.select_one(page, config["index_selector"])
    HTML.append_child(container, rendered_entries)
  '''



# This view displays the first ten entries on the main page
[index.views.papers-summary]
  index_selector = "#latest-papers-entries"

  section = "papers"
  include_subsections = true

  # In this case index_template is a soupault built-in
  index_template = """
    {% set limit = int(soupault_config.custom_options.papers_summary_max_entries) %}
    <dl>
      {% for e in sublist(0, limit, entries) %}
      <dt>{{e.paper_date}}</dt>
      <dd> <a href="{{e.url}}">{{e.paper_title}}</a> <i>[{{e.paper_conference}}]</i> </dd>
      {% endfor %}
      </ul>
    </dl>
  """


## TODO: Remove redundancy
[index.views.papers-index-workshops]
  index_selector = "#paper-entries-workshops"

  ## Extract metadata from site/papers
  section = "papers"
  include_subsections = true

  # Jingoo template for rendering extracted metadata
  index_template = """
    {% for e in entries %}
    {% if e.paper_type == "Workshop" %}
    <h3><a href="{{e.url}}">{{e.paper_title}}</a>[{{e.paper_conference}}]</h2>
    <div><strong>Date:</strong> {{e.paper_date}}</div>
    {% if e.paper_authors %}
    <div class="paper-authors">
       <strong>Authors: </strong>
       {%- for author in e.paper_authors -%}
         {{author}}{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}
    <div><strong>Pages:</strong> {{e.paper_pages}}</div>
    {% if e.paper_artifacts %}
    <div class="paper-artifacts">
       <strong>Artifacts / Links: </strong>
       {%- for artifact in e.paper_artifacts -%}
        {{artifact}}{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}

    {% if e.paper_keywords %}
    <div class="tags">
       <strong>Keywords: </strong>
       {%- for tag in e.tags -%}
         <a href="/tags/{{tag}}"><span class="tag">{{tag}}</span></a>{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}
    {% endif %}
    {% endfor %}
  """


## TODO: Remove redundancy
[index.views.papers-index-conferences]
  index_selector = "#paper-entries-conferences"

  ## Extract metadata from site/papers
  section = "papers"
  include_subsections = true

  # Jingoo template for rendering extracted metadata
  index_template = """
    {% for e in entries %}
    {% if e.paper_type == "Conference" %}
    <h3><a href="{{e.url}}">{{e.paper_title}}</a>[{{e.paper_conference}}]</h2>
    <div><strong>Date:</strong> {{e.paper_date}}</div>
    {% if e.paper_authors %}
    <div class="paper-authors">
       <strong>Authors: </strong>
       {%- for author in e.paper_authors -%}
         {{author}}{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}
    <div><strong>Pages:</strong> {{e.paper_pages}}</div>
    {% if e.paper_artifacts %}
    <div class="paper-artifacts">
       <strong>Artifacts / Links: </strong>
       {%- for artifact in e.paper_artifacts -%}
        {{artifact}}{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}

    {% if e.paper_keywords %}
    <div class="tags">
       <strong>Keywords: </strong>
       {%- for tag in e.tags -%}
         <a href="/tags/{{tag}}"><span class="tag">{{tag}}</span></a>{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}
    {% endif %}
    {% endfor %}
  """


## TODO: Remove redundancy
[index.views.papers-index-others]
  index_selector = "#paper-entries-others"

  ## Extract metadata from site/papers
  section = "papers"
  include_subsections = true

  # Jingoo template for rendering extracted metadata
  index_template = """
    {% for e in entries %}
    {% if e.paper_type == "Other" %}
    <h3><a href="{{e.url}}">{{e.paper_title}}</a>[{{e.paper_conference}}]</h2>
    <div><strong>Date:</strong> {{e.paper_date}}</div>
    {% if e.paper_authors %}
    <div class="paper-authors">
       <strong>Authors: </strong>
       {%- for author in e.paper_authors -%}
         {{author}}{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}
    <div><strong>Pages:</strong> {{e.paper_pages}}</div>
    {% if e.paper_artifacts %}
    <div class="paper-artifacts">
       <strong>Artifacts / Links: </strong>
       {%- for artifact in e.paper_artifacts -%}
        {{artifact}}{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}

    {% if e.paper_keywords %}
    <div class="tags">
       <strong>Keywords: </strong>
       {%- for tag in e.tags -%}
         <a href="/tags/{{tag}}"><span class="tag">{{tag}}</span></a>{% if not loop.last %}, {% endif %}
       {%- endfor -%}
    </div>
    {% endif %}
    {% endif %}
    {% endfor %}
  """

## Plugins
[plugins.git-timestamp]
  file = "plugins/git-timestamp.lua"

## Widgets
# Code Highlighting
# Runs the content of <* class="language-*"> elements through a syntax highlighter
[widgets.highlight]
  widget = "preprocess_element"
  selector = '*[class^="language-"]'
  command = 'pygmentize -f html -O linenos=1 -l $(echo $ATTR_CLASS | sed -e "s/language-//")'

# Latex
[widgets.inline-math]
  widget = "preprocess_element"
  selector = ".inline-math"
  command = "node scripts/katex.js"
  action = "replace_content"

[widgets.display-math]
  widget = "preprocess_element"
  selector = ".display-math"
  command = "DISPLAY=1 node scripts/katex.js"
  action = "replace_content"


# Takes the content of the first #page-title element or <h1> and inserts it into the <title>
# default is used if page has no elements matching those selectors.
[widgets.set-page-title]
  widget = "title"

  # Must run only after the header with an <h1 id="post-title"> element is inserted, which affects the blog section pages
  after = ['make-post-header', 'make-paper-header']

  selector = ["#page-title", "h1"]
  default = "Max Carroll"
  append = " &mdash; Max Carroll"

# Add link to git
[widgets.source-link]
  widget = "source-link"
  selector = "div#source-link"
  link_text = "Source link for this page"
  repo_base = "https://github.com/MaxCarroll0/MaxCarroll0.github.io/tree/main"

[widgets.breadcrumbs]
  widget = "breadcrumbs"
  
  selector = "#breadcrumbs"
  prepend = ".. / "
  append = " /"
  between = " / "
  breadcrumb_template = '<a href="{{url}}">{{name}}</a>'
  min_depth = 1

# Git update time
[widgets.last-modified]
  widget = "git-timestamp"
  after = ['insert-footer']
  timestamp_container_selector = "#last-updated"
  manual_timestamp_selector = "time#last-modified"
  timestamp_format = "<i>(Last modified on %s)<i>"
  git_date_format = "short"


# Inserts the contents of templates/header.html right before the <main> element
# There's a variety of actions, including prepend_child and replace_content
[widgets.insert-header]
  widget = "include"

  selector = "main"
  action = "insert_before"
  file = "templates/header.html"

# This widget comes from plugins/section-link-highlight.lua
# It highlights the "active" link in the navigation menu,
# that is, the link that matches the current page URL
[widgets.highlight-active-link]
  widget = "section-link-highlight"

  # Must run only after the header with a navigation menu is inserted
  after = ["insert-header"]

  selector = "nav"
  active_link_class = "nav-active"

# Creates a table of contents from the page headings
# and inserts it in the element with id="sidebar" as per the selector and action options.
[widgets.toc]
  widget = "toc"

  selector = "#sidebar"
  action = "prepend_child"

  min_level = 2
  max_level = 3

  toc_list_class = "toc"
  toc_class_levels = false

  # Insert a link to the current section next to each heading for easy copying.
  # When ids are persistent, deep linking is not bad, it's great.
  heading_links = true
  heading_link_class = "here"
  heading_link_text = "# "

  # Use slugified <h*> tag content for the id
  # is a heading doesn't have an id attribute.
  #
  # If a heading does have an id, like <h2 id="ip-route">
  # that id is preserved and used in the ToC link.
  use_heading_slug = true

  # Wrap every sub-list in a <li>, as the HTML standard demands.
  valid_html = true


# This widget comes from plugins/collapsible-list.lua
#
# It converts nested <ul>/<ol> elements to a tree with foldable nodes
# using HTML5 <details>/<summary> elements.
[widgets.toc-collapse]
  after = "toc"
  widget = "collapsible-list"
  collapsible_class = "collapsible"



# Having chunks of the page wrapped in <div> or some other block elements
# make styling a lot simpler.
# However, writing those wrapper elements by hand is annoying.
# That's where the plugin from plugins/wrap-sections.lua comes into play.
#
# Here it takes this:
#
# <h3>First heading</h3>
# <p>First paragraph</p>
# <h3>Second heading</h3>
# <p>First paragraph</p>
#
# and converts it to this:
#
# <div class="subsection">
#   <h3>First heading</h3>
#   <p>First paragraph</p>
# </div>
# <div class="subsection">
#  <h3>Second heading</h3>
# ...
[widgets.wrap-subsections]
  widget = "wrap-sections"
  selector = "main"
  wrapper_element = "div"
  level = 3
  class = "subsection"

# Same, but for the <h2> level
# One use for it is the different background color for even subsections of a section.
# Applying :nth-child(even) to subsections without wrapping them in section may create an awkward look
# when a previous section has an odd number of subsections: in that case it's the _first_ child
# that ends up colored differently.
# The only way to prevent that is to make all subsection elements children of a single parent.
[widgets.wrap-sections]
  widget = "wrap-sections"
  selector = "main"
  wrapper_element = "div"
  level = 2
  class = "section"

# Inserts the contents of templates/footer.html at the end of the <body>
[widgets.insert-footer]
  widget = "include"
  selector = "body"
  action = "append_child"
  file = "templates/footer.html"

[widgets.make-post-header]
  widget = "post-header"
  section = "blog"
  include_subsections = true
  exclude_page = "blog/index.md"

  content_container_selector = "main"

  post_header_template = '''
    <div id="post-header">
      <h1><span id="post-title">{{title}}</span>{% if series %}{% if series != title %} - <a href="/blog/{{series}}" id="post-series">{{series}}</a>{% endif %}{% endif %}</h1>
      <div><strong>Date posted:</strong> <time id="post-date" datetime="{{date}}">{{date}}</time></div>
      {% if tags %}
        <div class="tags">
         <span><strong>Tags:</strong> </span>
         {%- for t in tags -%}
           <a href="/tags/{{t}}"><span class="tag">{{t}}</span></a>{% if not loop.last %}, {% endif %}
         {%- endfor -%}
         </div>
        {% endif %}
    </div>
'''

[widgets.insert-series-nav-bar]
  widget = "insert_html"

  after = ["make-post-header", "footnotes"]

  section = "blog/"

  exclude_path_regex = "(.*)/index(.*)"

  action = "append_child"
  selector = "main"

  html = '<nav id="series-nav-bar"></nav>'

[widgets.make-paper-header]
  widget = "paper-header"
  section = "papers"
  include_subsections = true
  exclude_page = "papers/index.md"

  content_container_selector = "main"

  paper_header_template = '''
    <div id="paper-header">
      <h1 id="paper-title">{{title}}</h1>
      <div><strong>Published:</strong> <time id="paper-date" datetime="{{date}}">{{date}}</time> in <strong><span id="paper-conference"><a href="{{conference_url}}">{{conference}}</a></strong> 
<span {% if paper_type == "Other" %} style="display:none;" {% endif %}> (<span class="paper-type">{{paper_type}}</span>)</span>
    </div>
      <div><strong>Pages:</strong> <span id="paper-pages">{{pages}}</span></div>
      {% if authors %}
        <div class="authors">
         <span><strong>Authors:</strong> </span>
         {%- for author in authors -%}
           <span class="paper-author"><a href="{{author[1]}}">{{author[0]}}</a></span>{% if not loop.last %}, {% endif %}
         {%- endfor -%}
         </div>
        {% endif %}
      {% if artifacts %}
        <div class="paper-artifacts">
         <span><strong>Artifacts / Links: </strong> </span>
         {%- for artifact in artifacts -%}
            <span class="paper-artifact"><a href="{{artifact[2]}}" {% if artifact[0] == "Artifact" %} download {% endif %}> {{artifact[1]}}</a></span> {% if not loop.last %}, {% endif %}
         {%- endfor -%}
         </div>
        {% endif %}
      {% if tags %}
        <div class="tags">
         <span><strong>Tags:</strong> </span>
         {%- for tag in tags -%}
           <a href="/tags/{{tag}}"><span class="tag">{{tag}}</span></a>{% if not loop.last %}, {% endif %}
         {%- endfor -%}
         </div>
        {% endif %}
      <h2>Abstract</h2>
      <p id="paper-abstract">{{abstract}}</p>
    </div>
'''
  
  paper_pdf_template = '''
    {% if pdf_path %}
    <div id="paper-pdf">
      <h2>Embedded PDF</h2>
      <object data="{{pdf_path}}"
              type="application/pdf"  
              style="height:90vh; width:100%; border:none"
              title="Embedded PDF Viewer" 
              class="pdf-box">
        <iframe id="google-pdf-viewer" 
                style="width:100vw; height:90vh; border:none"
                class="pdf-box"></iframe>
        <script>
          const absoluteUrl = window.location.origin + "{{pdf_path}}";
          const iframe = document.getElementById("google-pdf-viewer");
          iframe.src = `https://docs.google.com/viewer?url=${encodeURIComponent(absoluteUrl)}&embedded=true`;
        </script>
      </object>
    
     </div>  
    {% endif %}
'''



# Why require adding a target element for the reading-time plugin by hand?
# We'll insert it automatically
[widgets.insert-reading-time-container]
  widget = "insert_html"

  after = "make-post-header"

  # Reading time container should only be in blog/*
  section = "blog/"

  # ...but not in blog/index.html
  exclude_path_regex = "(.*)/index(.*)"

  # Insert the reading time container right after the post title in <h1>
  action = "append_child"
  selector = "#post-header"

  html = '<div><strong>Reading time:</strong> <span id="post-reading-time"></span></div>'

# This widget comes from plugins/reading-time.lua
# It calculates estimated reading time based on word count
[widgets.insert-reading-time]
  widget = "reading-time"

  # If this widget runs before "insert-reading-time-container",
  # there will be nowhere to insert the reading time.
  # This is why we explicitly schedule it to run after that widget.
  after = "insert-reading-time-container"
  reading_speed = 180

  selector = "#post-reading-time"

  # The element where it looks for page "content"
  content_selector = "main"

# Inserts a table of contents generated from page headings
[widgets.table-of-contents]
  #exclude_path_regex = '/index(.*)'

  widget = "toc"
  selector = "#generated-toc"

  min_level = 2

  toc_list_class = "toc"
  toc_class_levels = false

  valid_html = true

  numbered_list = true

  heading_links = true
  heading_link_text = "→ "
  heading_link_class = "here"

  use_heading_slug = true

[widgets.list-to-tree]
  widget = "collapsible-list"
  selector = ["ul.tree", "ol.tree"]
  collapsible_class = "collapsible"


[widgets.insert-footnotes-container]
  widget = "insert-if"

  selector = "main"
  check_selector = "fn"
  html = '<div id="footnotes"> </div>'

[widgets.footnotes]
  widget = "footnotes"

  after = "insert-footnotes-container"

  selector = "div#footnotes"
  footnote_selector = ["fn"]
  footnote_link_class = "footnote"
  back_links = true
  link_id_prepend = "footnote-"
  back_link_id_append = "-ref"

[widgets.atom]
  widget = "atom"
  page = "blog/index.md"
  feed_file = "atom.xml"
  use_section = "blog"
